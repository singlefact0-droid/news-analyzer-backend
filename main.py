from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from openai import OpenAI
import os

# ✅ Load key from environment (Render will inject this)
OPENROUTER_API_KEY = os.getenv("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")

# ✅ Initialize client
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# ✅ Create FastAPI app
app = FastAPI()

# ✅ CORS setup (you can restrict later)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class Article(BaseModel):
    article: str

@app.post("/analyze")
async def analyze(article: Article):
    try:
        prompt = f"""
        Analyze the credibility of this news article and provide:
        1. Credibility score out of 100%
        2. Short summary
        3. Counterarguments against its claims

        Article: {article.article}
        """

        response = client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=[
                {"role": "system", "content": "You are a factual news credibility analyzer."},
                {"role": "user", "content": prompt},
            ],
        )

        message = response.choices[0].message.content

        return {
            "credibility_score": "AI-generated",
            "summary": message,
            "counterarguments": "Generated by AI"
        }

    except Exception as e:
        return {"error": str(e)}

@app.get("/")
def home():
    return {"message": "✅ News Analyzer API with OpenRouter is running!"}

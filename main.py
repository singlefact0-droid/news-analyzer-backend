# main.py
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

try:
    import cohere
except Exception:
    raise RuntimeError("Missing dependency 'cohere'. Make sure it's in requirements.txt")

# ==== DIRECT API KEY (replace later) ====
COHERE_API_KEY = "ZEixRJzy9l9CqtbyEFcsm495GPKHEEAxlw1vwjgn"

# Initialize client
client = cohere.Client(COHERE_API_KEY)

app = FastAPI()

# CORS settings
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # temporarily allow all origins; change to frontend URL later
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request model
class Article(BaseModel):
    article: str

def extract_cohere_text(resp) -> str | None:
    """Extract text from different possible Cohere response objects."""
    try:
        if hasattr(resp, "output") and resp.output:
            first = resp.output[0]
            if hasattr(first, "content"):
                return first.content
            if isinstance(first, dict) and "content" in first:
                return first["content"]
    except Exception:
        pass
    try:
        if hasattr(resp, "message") and resp.message:
            msg = resp.message
            if isinstance(msg, str):
                return msg
            if hasattr(msg, "content"):
                return msg.content
            if isinstance(msg, dict) and "content" in msg:
                return msg["content"]
    except Exception:
        pass
    try:
        if hasattr(resp, "output_text") and resp.output_text:
            return resp.output_text
        if hasattr(resp, "text") and resp.text:
            return resp.text
    except Exception:
        pass
    return None

@app.post("/analyze")
async def analyze(article: Article):
    text = (article.article or "").strip()
    if not text:
        return {"credibility_score": None, "summary": "Empty input.", "counterarguments": "N/A"}

    prompt = (
        "You are an assistant that examines a news article and returns:\n"
        "1) A credibility score out of 100 (brief)\n"
        "2) A short 1-2 sentence summary\n"
        "3) 2-3 concise counterarguments or reasons the article may be unreliable\n\n"
        f"Article:\n{text}\n\n"
        "Return the score, then the summary, then the counterarguments."
    )

    try:
        response = client.chat(
            model="command-a-03-2025",  # replace with a model your account can access
            message=prompt,
            max_tokens=300,
        )

        output_text = extract_cohere_text(response)
        if not output_text:
            return {"error": "No text generated by model. Check API key or model access."}

        lines = [l.strip() for l in output_text.splitlines() if l.strip()]
        credibility = next((l for l in lines[:4] if "%" in l), "AI-generated")
        remaining_lines = [l for l in lines if l != credibility]
        summary = remaining_lines[0] if remaining_lines else "No summary generated."
        counterarguments = " ".join(remaining_lines[1:]) if len(remaining_lines) > 1 else "No counterarguments found."

        return {
            "credibility_score": credibility,
            "summary": summary,
            "counterarguments": counterarguments
        }

    except Exception as e:
        return {"error": str(e)}

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
import openai
import os

# Initialize FastAPI app
app = FastAPI()

# ‚úÖ Allow requests from your Firebase website
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://house-of-prompts.web.app",
        "https://house-of-prompts.firebaseapp.com",
        "http://localhost:5500",  # optional: allows local testing
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Set up OpenAI key
openai.api_key = os.getenv("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")

@app.get("/")
def root():
    """Basic route to confirm backend is live."""
    return {"message": "‚úÖ Backend is running successfully on Render!"}


@app.post("/analyze")
async def analyze_article(request: Request):
    """Analyze the credibility of a news article."""
    try:
        data = await request.json()
        article = data.get("article", "").strip()

        if not article:
            return {
                "error": "‚ùå No article text provided.",
                "summary": "Please paste a news article to analyze.",
                "counter": "Try again after entering valid text.",
                "score": "-"
            }

        # üß† Call OpenAI to analyze the article
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": (
                    "You are an AI that analyzes news articles. "
                    "Evaluate how credible the article seems, give a short summary, "
                    "and list possible counterarguments regardless of the article's truth."
                )},
                {"role": "user", "content": article}
            ]
        )

        ai_message = response["choices"][0]["message"]["content"]

        # You can refine this part later to extract score, summary, etc.
        return {
            "score": 0.85,  # placeholder confidence score
            "summary": ai_message,
            "counter": "Counterarguments generated by AI for balance."
        }

    except Exception as e:
        # In case of any error, return the reason
        return {
            "error": str(e),
            "summary": "‚ö†Ô∏è Could not analyze this article.",
            "counter": "Check your internet connection or API setup.",
            "score": "-"
        }
